#+TITLE: Emacs config

Before anything, symlink this directory to ~.emacs.d~. Then just start emacs and it will bootstrap itself.

* Table Of Contents                                                :TOC:TOC2:
- [[#bootstrap][Bootstrap]]
  - [[#fix-org-load-path][Fix org load path]]
  - [[#utils][Utils]]
- [[#text-editing][Text editing]]
  - [[#unset-keys][Unset keys]]
  - [[#modal-editing][Modal editing]]
  - [[#indentation][Indentation]]
  - [[#scrolling][Scrolling]]
  - [[#crux---or-better-move-beginning-of-line][Crux - or better move-beginning-of-line]]
  - [[#parenthesis][Parenthesis]]
  - [[#show-line-numbers][Show line numbers]]
  - [[#show-hex-colors][Show hex colors]]
  - [[#keymap-to-toggle-line-wrap][Keymap to toggle line wrap]]
  - [[#keep-files-clear-of-trailing-whitespaces][Keep files clear of trailing whitespaces]]
  - [[#updowncase-region-commands][Up/downcase region commands]]
  - [[#better-undo][Better undo]]
  - [[#spell-checking][Spell checking]]
  - [[#completion][Completion]]
  - [[#automatically-reload-change-files][Automatically reload change files]]
  - [[#increment-number-package][Increment number package]]
- [[#quality-of-life][Quality of Life]]
  - [[#set-default-browser][Set default browser]]
  - [[#save-history][Save history]]
  - [[#scratch-buffer-major-mode][scratch buffer major mode]]
  - [[#change-confirmation-prompt-to-ask-just-for-y-or-n][Change confirmation prompt to ask just for "y" or "n"]]
  - [[#disable-lockfiles][Disable lockfiles]]
  - [[#fixing-autosavebackup-files][Fixing autosave/backup files]]
  - [[#more-ergonomic-exec-command-bind][More ergonomic exec-command bind]]
  - [[#which-key][which-key]]
  - [[#improve-eldoc][Improve eldoc]]
  - [[#better-help-buffers][better help buffers]]
- [[#navigation][Navigation]]
  - [[#projectel][Project.el]]
  - [[#window-config-history][Window config history]]
  - [[#avy-goto-char][Avy (goto char)]]
  - [[#consult][Consult]]
- [[#programming][Programming]]
  - [[#eglot][Eglot]]
  - [[#syntax-checking][Syntax checking]]
  - [[#git][Git]]
  - [[#structured-editing][Structured editing]]
  - [[#syntax-highlighting][Syntax highlighting]]
  - [[#plantuml][PlantUML]]
  - [[#direnv][direnv]]
  - [[#json][JSON]]
  - [[#markdown][Markdown]]
  - [[#yaml][yaml]]
  - [[#protobuf][protobuf]]
  - [[#terraform][Terraform]]
  - [[#cc][C/C++]]
  - [[#cmake][CMake]]
  - [[#go][Go]]
  - [[#web-mode][Web-mode]]
  - [[#typescript][Typescript]]
  - [[#dockerfiles][Dockerfiles]]
  - [[#clojure][Clojure]]
  - [[#ocaml][OCaml]]
  - [[#scala][Scala]]
  - [[#nix][Nix]]
  - [[#bazel][Bazel]]
  - [[#wkt][WKT]]
  - [[#lua][Lua]]
  - [[#elixir][Elixir]]
  - [[#shell][Shell]]
  - [[#github-copilot][Github Copilot]]
  - [[#rust][Rust]]
- [[#writing][Writing]]
  - [[#org-mode][Org-mode]]
  - [[#org-roam][org-roam]]
- [[#gui][GUI]]
- [[#other][Other]]
  - [[#copy-environment-variables][Copy environment variables]]
  - [[#dired][Dired]]
  - [[#gpg][GPG]]
  - [[#presentation-mode][Presentation mode]]

* Bootstrap

  First things first: in order to fetch anything, we'll need a package manager. Since I'm rewriting my config, why not try a different one? I'll use [[https://github.com/raxod502/straight.el][straight.el]]

  #+begin_src emacs-lisp :tangle yes
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
  #+end_src

  Now that we have straight.el installed, we can use it to install [[https://github.com/jwiegley/use-package][use-package]]. This will be our main way of configuring and installing packages.

  #+begin_src emacs-lisp :tangle yes
  (straight-use-package 'use-package)
  #+end_src

  Every package from now on can be installed with ~(use-package <package-name> :straight t)~

  We'll also install [[https://github.com/emacsmirror/diminish][diminish.el]] to use with ~use-package~.

  #+begin_src emacs-lisp :tangle yes
    (use-package diminish :straight t)
  #+end_src

  There's also this hack to improve compiling times:

  #+begin_src emacs-lisp :tangle yes
  (setq gc-cons-threshold 100000000)
  #+end_src

** Fix org load path

   Now we need to fix org load path (see https://www.reddit.com/r/emacs/comments/qcj33a/problem_and_workaround_with_orgmode_function/ for more info). We do this by loading org very early.

   #+begin_src emacs-lisp :tangle yes
   (straight-use-package 'org)
   #+end_src

** Utils

Let's define some utils to write our config. First, a function to get the cache root dir and another to get and create subdirs inside the cache dir.

#+begin_src emacs-lisp :tangle yes
(defun my/cache-dir ()
  (let ((d (file-name-as-directory (or (getenv "XDG_CACHE_HOME") (concat (file-name-as-directory (getenv "HOME")) ".cache/emacs.d")))))
    (when (not (file-directory-p d))
      (mkdir d))
    d))

(defun my/app-cache-dir (app-name)
  (let ((d (file-name-as-directory (concat (my/cache-dir) app-name))))
    (when (not (file-directory-p d))
      (mkdir d))
      d))
#+end_src

* Text editing

** Unset keys

Removing some bindings that either I don't like, I don't use or conflicts with stuff I actually use:

#+begin_src emacs-lisp :tangle yes
(global-unset-key (kbd "<tab>"))
(global-unset-key (kbd "TAB"))
#+end_src

** Modal editing

   [TODO test [[https://github.com/meow-edit/meow][meow]] instead]

   We'll use [[https://github.com/emacs-evil/evil][evil]] for modal editing.

   First, let's define a key to be the leader. There's a [[https://github.com/cofi/evil-leader][package]] for that but I'm not sure if I need it yet.

   #+begin_src emacs-lisp :tangle yes
   (defcustom my/evil-leader-key "'" "Key to be used as prefix for a number of commands")

   (defvar my/evil-leader-key-map
     (let ((m (make-sparse-keymap)))
       (define-key m "f" 'find-file)
       (define-key m "b" 'switch-to-buffer)
       (define-key m "x" 'execute-extended-command)
       (define-key m "k" 'kill-buffer)
       (define-key m "o" 'other-window)
       (define-key m "?" 'xref-find-references)
       m))
   #+end_src

   We'll need to initialize general.el so we can have a leader key taking precedence over evil-collection stuff:

   #+begin_src emacs-lisp :tangle yes
   (use-package general :straight t
     :init
     (setq general-override-states '(insert
                                     emacs
                                     hybrid
                                     normal
                                     visual
                                     motion
                                     operator
                                     replace)))
   #+end_src

   Now the actual package:

   #+begin_src emacs-lisp :tangle yes
   (use-package evil :straight t
     :init
     (setq evil-want-keybinding nil)
     (setq evil-undo-system 'undo-tree)
     (setq evil-want-fine-undo t)
     :config
     (evil-mode 1)
     (general-define-key
      :states '(normal visual motion)
      :keymaps 'override
      my/evil-leader-key my/evil-leader-key-map)
     :bind
     (:map evil-normal-state-map
           ("." . nil)
           ("C-." . nil)
           :map evil-motion-state-map
           ("H" . nil)
           ("L" . nil)
           :map evil-insert-state-map
           ("C-k" . nil))
     (:map evil-motion-state-map
           ("TAB" . nil)))

   (use-package evil-collection :straight t
     :after (evil)
     :custom
     (evil-collection-setup-minibuffer t)
     :init
     (evil-collection-init))
   #+end_src

   We'll also add [[https://github.com/bling/evil-visualstar][evil-visualstar]] so we can search text that is selected using visual mode:

   #+begin_src emacs-lisp :tangle yes
   (use-package evil-visualstar :straight t
     :config
     (global-evil-visualstar-mode +1))
   #+end_src

** Indentation

   Let's start by setting indent to spaces by default.

   #+begin_src emacs-lisp :tangle yes
   (setq-default indent-tabs-mode nil)
   (setq-default tab-width 4)
   #+end_src

** Scrolling

   #+begin_src emacs-lisp :tangle yes
   (setq scroll-step 1)
   #+end_src

** Crux - or better move-beginning-of-line

   We'll install [[https://github.com/bbatsov/crux][crux]] basically for the ~crux-move-beginning-of-line~.

   #+begin_src emacs-lisp :tangle yes
   (use-package crux :straight t
     :bind
     ([remap move-beginning-of-line] . crux-move-beginning-of-line))
   #+end_src

** Parenthesis

   Coloring them:

   #+begin_src emacs-lisp :tangle yes
   (use-package rainbow-delimiters :straight t
     :hook (prog-mode . rainbow-delimiters-mode))
   #+end_src

   Showing the matching one:

   #+begin_src emacs-lisp :tangle yes
   (show-paren-mode 1)
   (set-face-attribute 'show-paren-match nil :weight 'extra-bold)
   (set-face-attribute 'show-paren-mismatch nil :weight 'extra-bold)
   #+end_src

** Show line numbers

   #+begin_src emacs-lisp :tangle yes
   (use-package nlinum :straight t
     :config
     (global-nlinum-mode 1))
   #+end_src

** Show hex colors

   [[https://elpa.gnu.org/packages/rainbow-mode.html][rainbow-mode]] matches the background color to the color represented by a text (eg the hex "#efefef")

   #+begin_src emacs-lisp :tangle yes
   (use-package rainbow-mode :straight t)
   #+end_src

** Keymap to toggle line wrap

   Useful when reading logs

   #+begin_src emacs-lisp :tangle yes
   (global-set-key (kbd "C-c $") 'toggle-truncate-lines)
   #+end_src

** Keep files clear of trailing whitespaces

   We delete whitespaces on the save hook:

   #+begin_src emacs-lisp :tangle yes
   (add-hook 'before-save-hook 'delete-trailing-whitespace)
   #+end_src

** Up/downcase region commands

   #+begin_src emacs-lisp :tangle yes
   (put 'downcase-region 'disabled nil)
   (put 'upcase-region 'disabled nil)
   #+end_src

** Better undo

   #+begin_src emacs-lisp :tangle yes
   (use-package undo-tree :straight t
     :diminish undo-tree-mode
     :init
     (setq undo-tree-auto-save-history t)
     (setq undo-tree-history-directory-alist (list (cons ".*" (my/app-cache-dir "undo-tree"))))
     :config
     (global-undo-tree-mode 1))
   #+end_src

** Spell checking

   We'll use ispell.

   #+begin_src emacs-lisp :tangle yes
 (use-package ispell :straight t
   :init
   (setq ispell-dictionary "american"))
   #+end_src

   Associated with flyspell to highlight spelling errors.

   #+begin_src emacs-lisp :tangle yes
   (use-package flyspell
     :straight t
     :hook ((prog-mode . flyspell-prog-mode)
            (text-mode . flyspell-mode))
     :bind (:map flyspell-mode-map
                 ("C-;" . nil)
                 ("C-." . nil))
     :diminish flyspell-mode flyspell-prog-mode)
   #+end_src

   [TODO: flyspell defines ~C-M i~ which clashes with autocompletions]

** Completion

   I've used helm for maybe 8 years now, so it's time to try something new, so let's try [[https://github.com/minad/vertico][vertico]]. Its main selling point for me is the simplicity and that it ties to the default completion framework built in to Emacs.

   #+begin_src emacs-lisp :tangle yes
   (use-package vertico :straight t
     :bind
     (:map vertico-map
     ("C-j" . vertico-next)
     ("C-k" . vertico-previous))
     :init
     (vertico-mode))

   (use-package vertico-directory
     :load-path "straight/build/vertico/extensions"
     :requires (vertico)
     :bind
     (:map vertico-map
           ("M-h" . vertico-directory-up)))

   (use-package emacs
     :init
     ;; Do not allow the cursor in the minibuffer prompt
     (setq minibuffer-prompt-properties
           '(read-only t cursor-intangible t face minibuffer-prompt))
     (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode))
   #+end_src

   And let's use [[https://github.com/oantolin/orderless][orderless]] as the completion style (it's a fuzzy matching style of completing, instead of the default prefix match).

   #+begin_src emacs-lisp :tangle yes
   (use-package orderless :straight t
     :init
     (setq completion-styles '(orderless)
           completion-category-defaults nil
           completion-category-overrides '((file (styles partial-completion)))))
   #+end_src

   (TODO: test prescient.el instead of orderless)

   And marginalia:

   #+begin_src emacs-lisp :tangle yes
   (use-package marginalia :straight t
     ;; Either bind `marginalia-cycle` globally or only in the minibuffer
     :bind (("M-A" . marginalia-cycle)
            :map minibuffer-local-map
            ("M-A" . marginalia-cycle))

     ;; The :init configuration is always executed (Not lazy!)
     :init

     ;; Must be in the :init section of use-package such that the mode gets
     ;; enabled right away. Note that this forces loading the package.
     (marginalia-mode))
   #+end_src

   We'll also need [[https://github.com/oantolin/embark][embark]] for actions on the completing candidates:

   #+begin_src emacs-lisp :tangle yes
   (use-package embark :straight t

     :bind
     (("C-." . embark-act)
      ("C-;" . embark-dwim))

     :config

     ;; Hide the mode line of the Embark live/completions buffers
     (add-to-list 'display-buffer-alist
                  '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                    nil
                    (window-parameters (mode-line-format . none)))))
   #+end_src

   Now let's install yasnippet.

   #+begin_src emacs-lisp :tangle yes
   (use-package yasnippet :straight t
     :diminish yas-minor-mode
     :bind (:map my/evil-leader-key-map
                 ("y" . yas-insert-snippet))
     :config
     (yas-global-mode 1))
   #+end_src

   Finally, for a better completion command:

   #+begin_src emacs-lisp :tangle yes
   (global-set-key (kbd "C-;") #'completion-at-point)
   #+end_src

** Automatically reload change files

   #+begin_src emacs-lisp :tangle yes
   (auto-revert-mode +1)
   #+end_src

** Increment number package

This gives us commands to increment/decrement numbers at point.

#+begin_src emacs-lisp :tangle yes
(use-package shift-number :straight t
  :bind (:map my/evil-leader-key-map
              ("+" . shift-number-up)
              ("-" . shift-number-down)))
#+end_src

* Quality of Life

** Set default browser

   Set browser function to find the default OS browser to open URLs.

   #+begin_src emacs-lisp :tangle yes
   (setq browse-url-browser-function 'browse-url-default-browser)
   #+end_src

** Save history

   Well, emacs has a [[https://www.emacswiki.org/emacs/SaveHist][mode for saving history of stuff written in the minibuffer]]. Let's enable that

   #+begin_src emacs-lisp :tangle yes
   (use-package savehist
     :init
     (savehist-mode))
   #+end_src

** scratch buffer major mode

   #+begin_src emacs-lisp :tangle yes
   (setq initial-major-mode 'markdown-mode)
   #+end_src

** Change confirmation prompt to ask just for "y" or "n"

   #+begin_src emacs-lisp :tangle yes
   (defalias 'yes-or-no-p 'y-or-n-p)
   #+end_src

** Disable lockfiles

   Never saw the need for that

   #+begin_src emacs-lisp :tangle yes
   (setq create-lockfiles nil)
   #+end_src

** Fixing autosave/backup files

   One annoying thing is the temporary files that emacs creates on the same folder as our source. We'll instruct emacs to store these files in a temporary dir.

   #+begin_src emacs-lisp :tangle yes
   (setq backup-directory-alist
         `((".*" . ,temporary-file-directory)))
   (setq auto-save-file-name-transforms
         `((".*" ,temporary-file-directory t)))
   #+end_src

** More ergonomic exec-command bind

   #+begin_src emacs-lisp :tangle yes
   (global-set-key (kbd "C-x C-m") 'execute-extended-command)
   (global-set-key (kbd "M-x") nil)

   #+end_src

** which-key

   Great mode for completing the next keys you can enter after a prefix.

   #+begin_src emacs-lisp :tangle yes
   (use-package which-key :straight t
     :config
     (which-key-mode))
   #+end_src

** Improve eldoc

   Tells eldoc to show documentation from different sources concatenated.

   #+begin_src emacs-lisp :tangle yes
   (use-package eldoc :straight t
     :diminish eldoc-mode
     :custom
     (eldoc-echo-area-prefer-doc-buffer t)
     :config
     (global-eldoc-mode 1)
     (setq eldoc-documentation-function #'eldoc-documentation-compose))
   #+end_src

** better help buffers

   #+begin_src emacs-lisp :tangle yes
   (use-package helpful
     :straight t
     :bind (("C-h f" . helpful-callable)
            ("C-h v" . helpful-variable)
            ("C-h k" . helpful-key)
            ("C-h f" . helpful-function)
            ("C-h c" . helpful-command)))
   #+end_src

* Navigation

** Project.el

   Let's start by defining a variable that will store all file names that can be used to find a project root dir.

   #+begin_src emacs-lisp :tangle yes
   (defcustom my/project-root-files '() "Presence of one of this files defines a project root dir")

   ;; quick helper to list all parent directories
   (defun my/--dir-parents (dir)
     (let ((next-dir (file-name-directory (directory-file-name (expand-file-name dir)))))
       (cons (abbreviate-file-name dir) (if (equal next-dir dir) nil (my/--dir-parents next-dir)))))
   #+end_src

   #+begin_src emacs-lisp :tangle yes :noweb yes
   (use-package project
     :after (evil general)
     :config
     <<project-el-kill-buffers>>
     <<project-el-find-project-function>>
     <<project-el-override-leader-key>>
     <<project-el-add-makefile-root-file>>)
   #+end_src

   We are making use of a custom command to save all buffers from the project:

   #+name: project-el-kill-buffers
   #+begin_src emacs-lisp
   ;; copied predicate from project.el
   (defun my/project-buffer-p (project buf)
     (let ((root (expand-file-name (file-name-as-directory (project-root project)))))
       (string-prefix-p root (expand-file-name
                              (buffer-local-value 'default-directory buf)))))

   ;; let's define a function to save all buffers from a project
   (defun my/project-save-buffers ()
     "Save buffers for a given project"
     (interactive)
     (let ((pr (project-current)))
       (save-some-buffers nil (lambda () (my/project-buffer-p pr (current-buffer))))))

   (define-key project-prefix-map "s" #'my/project-save-buffers)
   #+end_src

   And another function to find more project roots (currently project.el is [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Projects.html][limited to VC and EDE-type projects]]). We just iterate on the parent directories until we find one that has a file contained in the ~my/project-root-files~ variable.

   #+name: project-el-find-project-function
   #+begin_src emacs-lisp
   (defun my/--try-find-project-root (dir)
     (cl-find-if (lambda (curr-dir)
                   (cl-find-if (lambda (candidate-file)  (file-exists-p (expand-file-name candidate-file curr-dir)))
                               my/project-root-files))
                (my/--dir-parents dir)))

   (defun my/try-find-project (dir)
     (when-let ((proj-root (my/--try-find-project-root dir)))
       (cons 'my/project proj-root)))

   (cl-defmethod project-root ((project (head my/project)))
     (cdr project))
   (add-hook 'project-find-functions #'my/try-find-project)
   #+end_src

   **PS: The default implementation of ~find-files~ is using ~find-program~ and it uses the variable ~grep-find-ignored-files~, so whenever we need to ignore other files we just add it there (~VC~ type projects use the VC to define which to ignore, so it's a bit easier).**

   And finally let's define a prefix for the project key map:

   #+name: project-el-override-leader-key
   #+begin_src emacs-lisp
   (general-define-key
    :states '(normal visual motion)
    :keymaps 'override
    "SPC" project-prefix-map)
   #+end_src

   We can also add some files for finding a project dir:

   #+name: project-el-add-makefile-root-file
   #+begin_src emacs-lisp
   (add-to-list 'my/project-root-files "Makefile")
   (add-to-list 'my/project-root-files "dbt_project.yml")
   (add-to-list 'my/project-root-files "nx.json")
   #+end_src

** Window config history

   This is done using winner-mode

   #+begin_src emacs-lisp :tangle yes
   (winner-mode 1)
   #+end_src

** Avy (goto char)

   #+begin_src emacs-lisp :tangle yes
   (use-package avy :straight t
     :after (evil)
     :bind (("M-g e" . avy-goto-word-0)
            :map evil-normal-state-map
            ("`" . avy-goto-word-0)))
   #+end_src

** Consult

   #+begin_src emacs-lisp :tangle yes
   (use-package consult :straight t
     :after (evil project)
     :bind
     (:map project-prefix-map
      ("/" . consult-ripgrep)
      :map evil-normal-state-map
      ("Q" . consult-goto-line)
      :map my/evil-leader-key-map
      ("/" . consult-ripgrep))
     :init
     (setq completion-in-region-function (lambda (&rest args)
                                           (apply (if vertico-mode
                                                      #'consult-completion-in-region
                                                    #'completion--in-region)
                                                  args))))
  #+end_src

  And since we're using embark, let's also install ~embark-consult~:

  #+begin_src emacs-lisp :tangle yes
  (use-package embark-consult :straight t)
  #+end_src


* Programming

** Eglot

   I use Eglot for almost every language I program.

   #+begin_src emacs-lisp :tangle yes
   (use-package eglot :straight t
     :after (project)
     :bind
     (:map my/evil-leader-key-map
      ("e r" . eglot-code-actions)
      ("e e" . eglot-reconnect)
      ("e m" . eglot-rename)
      ("e I" . eglot-organize-imports))
     :config
     (add-to-list 'eglot-stay-out-of "eldoc-documentation-function$")
     (add-to-list 'eglot-stay-out-of 'eldoc-documentation-strategy)
     :hook
     (before-save . (lambda () (when (eglot-managed-p) (with-demoted-errors "Error when eglot-format-buffer: %s" (eglot-format-buffer))))))
   #+end_src

** Syntax checking

   #+begin_src emacs-lisp :tangle yes
   (use-package flymake
     :diminish flymake-mode
     :bind (:map my/evil-leader-key-map
                 (">" . flymake-goto-next-error)
                 ("<" . flymake-goto-prev-error))
     :hook (prog-mode . flymake-mode))
   #+end_src

** Git

   Let's install magit first.

   #+begin_src emacs-lisp :tangle yes
   (use-package magit
     :straight t
     :after (project)
     :bind
     (("C-c m s" . magit-status)
      ("C-c m b" . magit-blame-addition)
      :map magit-mode-map
      ("<SPC>" . nil)
      :map project-prefix-map ("g" . magit-status))
     :init
     (setq magit-last-seen-setup-instructions "1.4.0")
     (setq magit-git-executable "git")
     ;; See https://github.com/magit/magit/issues/2541
     (setq magit-display-buffer-function
           (lambda (buffer)
             (display-buffer
              buffer (if (and (derived-mode-p 'magit-mode)
                              (memq (with-current-buffer buffer major-mode)
                                    '(magit-process-mode
                                      magit-revision-mode
                                      magit-diff-mode
                                      magit-stash-mode
                                      magit-status-mode)))
                         nil
                       '(display-buffer-same-window)))))
     (add-to-list 'project-switch-commands '(magit-status "Magit Status")))
   #+end_src

   Now to configure the commit buffer with spellcheck and markdown:

   #+begin_src emacs-lisp :tangle yes
     (use-package flyspell :straight t
       :after (magit)
       :hook
       (git-commit-mode . turn-on-flyspell))

     (use-package markdown-mode :straight t
       :after (magit)
       :hook
       (git-commit-mode . markdown-mode))
   #+end_src

** Structured editing

#+begin_src emacs-lisp :tangle yes
(use-package evil-cleverparens :straight t)

(use-package evil-surround :straight t
  :config (global-evil-surround-mode 1))

(use-package symex :straight t
  :bind (:map my/evil-leader-key-map
              (";" . symex-mode-interface))
  :config
  (symex-initialize))
#+end_src


** Syntax highlighting

Apparently [[https://tree-sitter.github.io/tree-sitter/][tree-sitter]] is a better way of doing syntax highlighting. Instead of using a bunch of regexes, it uses the AST. It's supposed to be both faster and more precise.

#+begin_src emacs-lisp :tangle yes
(use-package tree-sitter :straight t
  :config
  ;; activate tree-sitter on any buffer containing code for which it has a parser available
  (global-tree-sitter-mode)
  (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode))

(use-package tree-sitter-langs :straight t
  :after tree-sitter)
#+end_src

** PlantUML

   Cool for making uml charts.

   #+begin_src emacs-lisp :tangle yes
   (use-package plantuml-mode
     :straight t
     :mode ("\\.puml\\'" . plantuml-mode)
     :config
     (setq plantuml-jar-path "~/.local/plantuml/plantuml.jar")
     (setq plantuml-default-exec-mode 'jar))
   #+end_src

   Very useful inside org-mode, so let's install the org babel extension:

   #+begin_src emacs-lisp :tangle yes
   (use-package ob-plantuml
     :config
     (setq org-plantuml-jar-path "~/utils/jars/plantuml.jar"))
   #+end_src

** direnv

   #+begin_src emacs-lisp :tangle yes
   (use-package direnv :straight t
     :config
     (direnv-mode))
   #+end_src

** JSON

   We'll install json and jsonnet modes:

   #+begin_src emacs-lisp :tangle yes
   (use-package json-mode :straight t
     :config
     (add-to-list 'auto-mode-alist '("\\.json.base\\'" . json-mode)))

   (use-package jsonnet-mode :straight t
     :config
     (add-to-list 'auto-mode-alist '("\\.libjsonnet\\'" . jsonnet-mode)))
   #+end_src

** Markdown

   #+begin_src emacs-lisp :tangle yes
   (use-package markdown-mode :straight t
     :mode
     ("\\.markdown\\'" . markdown-mode)
     ("\\.md\\'" . markdown-mode))
   #+end_src

** yaml

   #+begin_src emacs-lisp :tangle yes
   (use-package yaml-mode :straight t)
   #+end_src

** protobuf

   #+begin_src emacs-lisp :tangle yes
   (use-package protobuf-mode :straight t
     :mode ("\\.proto$" . protobuf-mode))
   #+end_src

** Terraform

   #+begin_src emacs-lisp :tangle yes
   (use-package terraform-mode :straight t)
   #+end_src

** C/C++

   #+begin_src emacs-lisp :tangle yes
   (use-package cc-mode :straight t
     :hook
     (c-c++-mode . (lambda () (setq require-final-newline t)))
     :init
     (setq c-default-style "linux"
           c-basic-offset 4))
   #+end_src

** CMake

   #+begin_src emacs-lisp :tangle yes
   (use-package cmake-mode :straight t)
   #+end_src

** Go

   #+begin_src emacs-lisp :tangle yes
   (use-package go-mode :straight t
     :after (eglot)
     :hook
     (go-mode . eglot-ensure)
     (before-save . gofmt-before-save))
   #+end_src

   We also need to add ~go.mod~ to the project root files list so it's used for finding the project root dir.

   #+begin_src emacs-lisp :tangle yes
   (add-to-list 'my/project-root-files "go.mod")
   #+end_src

   Let's also add a helper package to run go tests:

   #+begin_src emacs-lisp :tangle yes
   (use-package gotest :straight t)
   #+end_src

*** Snippets

    #+begin_src fundamental :tangle snippets/go-mode/tabular-tests :mkdirp yes
    # -*- mode: snippet -*-
    # name: Tabular test boilerplate
    # key: tc
    # --
    testCases := []struct {
        name     string
        $1
    }{$2}

    for _, tc := range testCases {
        t.Run(tc.name, func(t *testing.T) {
            $3
        })
    }
    #+end_src

    #+begin_src fundamental :tangle snippets/go-mode/error-wrapper :mkdirp yes
    # -*- mode: snippet -*-
    # name: Error wrapper func
    # key: wrapErr
    # --
    wrapErr := func(err error) error {
        return fmt.Errorf("$1: %w", err)
    }
    #+end_src

** Web-mode

    This is the final configuration:

   #+begin_src emacs-lisp :tangle yes
   (use-package web-mode :demand t
     :after (eglot)
     :straight t
     :mode (("\\.html?\\'" . web-mode)
            ("\\.svelte\\'" . web-mode))

     :config
     (setq web-mode-enable-auto-closing t)
     (setq web-mode-enable-auto-pairing t)
     (setq web-mode-code-indent-offset 2)
     (setq web-mode-markup-indent-offset 2)
     (setq web-mode-enable-literal-interpolation t))
   #+end_src

** Typescript

   Here's the final config:

   #+begin_src emacs-lisp :tangle yes :noweb yes
      (use-package typescript-mode :straight t :demand t
        :after (eglot)
        :mode (("\\.ts\\'" . typescript-mode))
        :hook
        (typescript-mode . eglot-ensure)
        (typescript-mode . (lambda () (setq-local tab-width 2)))
        :config
        (setq typescript-indent-level 2)
        <<typescript-mode-tsx-jsx-derived-mode>>
        <<typescript-mode-vuejs-derived-mode>>)
   #+end_src

   Let's define a derived mode for react files to force eglot and tree-sitter to understand them as different from typescript.

   #+name: typescript-mode-tsx-jsx-derived-mode
   #+begin_src emacs-lisp
   (define-derived-mode my/tsx-jsx-typescript-mode typescript-mode "tsx/jsx"
     "Major mode derived from web-mode to handle jsx and tsx files.")

   (add-to-list 'auto-mode-alist '("\\.jsx\\'" . my/tsx-jsx-typescript-mode))
   (add-to-list 'auto-mode-alist '("\\.tsx\\'" . my/tsx-jsx-typescript-mode))

   (add-hook 'my/tsx-jsx-typescript-mode-hook #'eglot-ensure)
   #+end_src

   We'll do the same for [[https://vuejs.org/][VueJS]]:

   #+name: typescript-mode-vuejs-derived-mode
   #+begin_src emacs-lisp
   (define-derived-mode my/vuejs-typescript-mode typescript-mode "vuejs"
     "Major mode derived from typescript-mode to handle Vue files.")
   (add-to-list 'auto-mode-alist '("\\.vue\\'" . my/vuejs-typescript-mode))

   (add-hook 'my/vuejs-typescript-mode-hook #'eglot-ensure)
   #+end_src

   Now let's define the language servers we'll use in these derived modes:

   #+begin_src emacs-lisp :tangle yes
   (use-package eglot :ensure t
     :config
     (add-to-list 'eglot-server-programs '(my/tsx-jsx-typescript-mode . ("typescript-language-server" "--stdio")))
     (add-to-list 'eglot-server-programs '(my/vuejs-typescript-mode . ("vls"))))
   #+end_src

   Now add the ~package.json~ file to be used for finding node project roots:

   #+begin_src emacs-lisp :tangle yes
   (add-to-list 'my/project-root-files "package.json")
   #+end_src

   We also need to tell the ~find-program~ to ignore node_modules, so we'll add it there too:

   #+begin_src emacs-lisp :tangle yes
   (use-package grep :demand t
     :config
     (add-to-list 'grep-find-ignored-files "node_modules"))
   #+end_src

   Finally let's add our new modes to tree-sitter:

   #+begin_src emacs-lisp :tangle yes
   (use-package tree-sitter
     :after (tree-sitter-langs)
     :config
      (tree-sitter-require 'tsx)
      (add-to-list 'tree-sitter-major-mode-language-alist '(my/tsx-jsx-typescript-mode . tsx)))
   #+end_src

   The final step is to make indentation better. We'll use [[https://github.com/orzechowskid/tsi.el][TSI]] which will use the AST from tree-sitter to calculate indentations.

   #+begin_src emacs-lisp :tangle yes
   (use-package tsi
     :straight (tsi :type git :host github :repo "orzechowskid/tsi.el")
     :after tree-sitter
     ;; define autoload definitions which when actually invoked will cause package to be loaded
     :commands (tsi-typescript-mode tsi-json-mode tsi-css-mode)
     :init
     (add-hook 'my/tsx-jsx-typescript-mode-hook (lambda () (tsi-typescript-mode 1)))
     (add-hook 'json-mode-hook (lambda () (tsi-json-mode 1)))
     (add-hook 'css-mode-hook (lambda () (tsi-css-mode 1)))
     (add-hook 'scss-mode-hook (lambda () (tsi-scss-mode 1))))
   #+end_src

*** Snippets

    #+begin_src fundamental :tangle snippets/typescript-mode/react-fc-ts :mkdirp yes
    # -*- mode: snippet -*-
    # name: react-fc-ts
    # key: fct
    # --
    import * as React from "react"

    export interface ${1:component}Props {}

    const $1: React.FC<$1Props> = (props) => {
         $2
    }

    export default $1;
    #+end_src

    #+begin_src fundamental :tangle snippets/typescript-mode/react-story-ts :mkdirp yes
    # -*- mode: snippet -*-
    # name: react-storybook-ts
    # key: tstory
    # --
    import React from 'react';

    import { ComponentStory, ComponentMeta } from '@storybook/react';

    import ${1:MyComponent}, { $1Props } from '.';

    export default {
        component: $1,
    } as ComponentMeta<typeof $1>;

    export const Basic: ComponentStory<typeof $1> = () => (<$1 />);
    #+end_src

** Dockerfiles

   #+begin_src emacs-lisp :tangle yes
   (use-package dockerfile-mode :straight t)
   #+end_src

** Clojure

Let's add clojure-mode and cider:

#+begin_src emacs-lisp :tangle yes
(use-package clojure-mode :straight t
  :after (eglot evil-cleverparens)
  :hook
  (clojure-mode . eglot-ensure)
  (clojure-mode . evil-cleverparens-mode))

(use-package cider :straight t)
#+end_src

We also need to add ~deps.edn~ as a file that specifies the root dir of a project:

#+begin_src emacs-lisp :tangle yes
(add-to-list 'my/project-root-files "deps.edn")
#+end_src

** OCaml

#+begin_src emacs-lisp :tangle yes
(use-package tuareg :straight t
  :after (eglot)
  :hook (tuareg-mode . eglot-ensure))
#+end_src

And let project.el know that if a dir has a ~dune-project~ file, it is a project root:

#+begin_src emacs-lisp :tangle yes
(add-to-list 'my/project-root-files "dune-project")
#+end_src

** Scala

#+begin_src emacs-lisp :tangle yes
(use-package scala-mode :straight t
  :after (eglot)
  :hook (scala-mode . eglot-ensure))

#+end_src

And, as per usual, let's add a file that can be used to detect when we're inside a scala project:

#+begin_src emacs-lisp :tangle yes
(add-to-list 'my/project-root-files "build.sbt")
#+end_src

** Nix

#+begin_src emacs-lisp :tangle yes
(use-package nix-mode :straight t
  :mode "\\.nix\\'"
  :after (eglot)
  :hook (nix-mode . eglot-ensure))
#+end_src

** Bazel

#+begin_src emacs-lisp :tangle yes
(use-package bazel :straight t)
#+end_src

** WKT

Well that's something I'll rarely use, but it's nice to have the syntax highlighting for examples:

#+begin_src emacs-lisp :tangle yes
(use-package wkt-mode
  :straight (:type git
             :repo "https://github.com/orontee/wkt-mode"))
#+end_src

** Lua

#+begin_src emacs-lisp :tangle yes
(use-package lua-mode :straight t)
#+end_src

** Elixir

#+begin_src emacs-lisp :tangle yes
(use-package elixir-mode :straight t)

(use-package eglot :straight t
  :after (elixir-mode)
  :config
  :hook (elixir-mode . eglot-ensure)
  :config
  (add-to-list 'eglot-server-programs '(elixir-mode "~/.local/elixir-ls/language_server.sh"))
  (add-to-list 'my/project-root-files "mix.exs"))
#+end_src

** Shell

Let's install vterm

#+begin_src emacs-lisp :tangle yes
(use-package vterm :straight t)
#+end_src

** Github Copilot

Let's jump in the bandwagon...

#+begin_src emacs-lisp :tangle yes
(use-package copilot
  :straight (:host github :repo "zerolfx/copilot.el" :files ("dist" "*.el"))
  :ensure t
  :hook (prog-mode . copilot-mode)
  :bind (:map copilot-completion-map
              ("TAB" . copilot-accept-completion)
              ("M-n" . copilot-next-completion)
              ("M-p" . copilot-previous-completion)))
#+end_src

** Rust

#+begin_src emacs-lisp :tangle yes
(use-package rust-mode :straight t
  :after (eglot)
  :hook (rust-mode . eglot-ensure))
#+end_src

* Writing

** Org-mode

   A lot of very old config that I keep here. I don't even know if I still use everything, but I keep here because I don't want to break my workflow :shrug:

   #+begin_src emacs-lisp :tangle yes
   (use-package ox-gfm :straight t
     :after (org)
     :config
     (require 'ox-gfm))

   (use-package org :straight t
     :bind
     (:map global-map
           ("C-c l" . org-store-link)
           ("C-M-r" . org-capture))

     :init
     (setq org-log-done t)
     (setq org-return-follows-link t)
     (setq org-src-fontify-natively t)
     (setq org-log-into-drawer t)
     (setq org-refile-targets '((gtd-main-p :maxlevel . 3)
                                (gtd-someday-p :level . 1)
                                (gtd-tickler-p :maxlevel . 2)))
     (setq org-confirm-babel-evaluate nil)
     (setq org-src-preserve-indentation nil
           org-edit-src-content-indentation 0)

     :hook
     (org-babel-after-execute . org-redisplay-inline-images)

     :config
     (plist-put org-format-latex-options :scale 1.5)
     (org-babel-do-load-languages
      'org-babel-load-languages
      '((dot . t)
        (shell . t)
        (python . t)
        ;; (ipython . t) this breaks everything if jupyter is not installed
        (lisp . t)
        (clojure . t)
        (gnuplot . t)
        (R . t)
        (plantuml . t)
        (lua . t)))
     (add-to-list 'org-export-backends 'md))

   #+end_src

   I'm not really using org-capture now, so I'll not tangle it. Here it is just as a documentation:

   #+begin_src emacs-lisp
   (use-package org-capture
     :init
     (setq org-capture-templates '(("t" "Todo [inbox]" entry
                                    (file+headline gtd-inbox-p "Tasks")
                                    "* TODO %i%?\n  %U\n"
                                    :prepend t :empty-lines 1)
                                   ("T" "Tickler" entry
                                    (file+headline gtd-tickler-p "Tickler")
                                    "* %i%? \n %U"))))

   (use-package org-agenda
     :bind
     (:map global-map
           ("C-c a" . org-agenda))
     :init
     (setq org-agenda-start-on-weekday nil)
     (setq org-agenda-skip-scheduled-if-done t)
     (setq org-stuck-projects `(,my/org-projects-pattern ("DOING") nil ""))
     (setq org-agenda-custom-commands
           `(("W" "Weekly Review"
              ((agenda "" ((org-agenda-span 7)))
               (tags "CATEGORY=\"TASKS\"|CATEGORY=\"PROJECTS\"/DONE")
               (tags-todo "CATEGORY=\"INBOX\"")
               (stuck "")
               (todo "DOING")
               (tags "CATEGORY=\"PROJECTS\"+LEVEL=2")
               (tags-todo "CATEGORY=\"SOMEDAY\"")
               (todo "WAITING")))
             ("E" "Export TODOS"
              ((tags-todo "CATEGORY=\"TASKS\""))
              nil
              ("/tmp/org-exported/todos.org"))
             ("g" . "GTD contexts")
             ("gw" "Work" tags-todo "@work")
             ("gh" "Home" tags-todo "@home")
             ("gp" "Pc" tags-todo "@pc")
             ("gi" "Internet" tags-todo "@internet")
             ("ge" "Errands" tags-todo "@errands")
             ("gf" "Freetime" tags-todo "@freetime")))
     :config
     (defun load-org-agenda-files-recursively (dir)
       "Collect all org agenda files in DIR."
       (unless (file-directory-p dir) (error "Not a directory `%s'" dir))
       (add-to-list 'org-agenda-files dir)
       (dolist (file-name (directory-files dir nil nil t))
         (unless (member file-name '("." ".."))
           (let ((file-path (expand-file-name file-name dir)))
             (when (file-directory-p file-path)
               (load-org-agenda-files-recursively file-path))))))
     (defun load-my-agenda-files ()
       "Load all agenda files recursively."
       (interactive)
       (unless (file-exists-p my-org-files-dir)
         (make-directory my-org-files-dir t))
       (load-org-agenda-files-recursively my-org-files-dir))
     (load-my-agenda-files))
   #+end_src

   One cool little tool is [[https://github.com/snosov1/toc-org][toc-org]]. It maintains an up to date TOC for us - very nice for seeing org files on Github.

   #+begin_src emacs-lisp :tangle yes
   (use-package toc-org :straight t
     :after (org)
     :hook
     (org-mode . toc-org-enable))
   #+end_src

** org-roam

   I plan on using org-roam to start taking better notes.

   #+begin_src emacs-lisp :tangle yes
   (use-package org-roam :straight t
     :after (org)
     :init
     (setq org-roam-directory "~/reps/slipbox")
     :config
     (org-roam-db-autosync-mode)
     :bind
     (("C-c n f" . org-roam-node-find)
      :map org-mode-map
           ("C-c n l" . org-roam-buffer-toggle)
           ("C-c n i" . org-roam-node-insert))
     :catch (lambda (keyword error)
              (message (error-message-string err))))

   #+end_src

* GUI

  Let's install the theme first:

   #+begin_src emacs-lisp :tangle yes
   (use-package doom-themes :straight t
     :config (load-theme 'doom-nord t))
   #+end_src

   Let's remove all the window decorations here. We don't need stuff for clicking if we don't use mouse!

   #+begin_src emacs-lisp :tangle yes
   (setq default-frame-alist '((undecorated . t)
                               (drag-internal-border . 1)
                               (internal-border-width . 5)))
   (tool-bar-mode -1)
   (menu-bar-mode -1)
   (scroll-bar-mode -1)
   #+end_src

   We also don't need the startup screen or the scratch message:

   #+begin_src emacs-lisp :tangle yes
   (setq-default inhibit-startup-screen t)
   (setq-default initial-scratch-message nil)
   #+end_src

   Now highlight current line everywhere

   #+begin_src emacs-lisp :tangle yes
   (global-hl-line-mode +1)
   #+end_src

   And the mode-line now. I really like what [[https://github.com/manateelazycat/awesome-tray][awesome-tray]]'s author had to say about the mode-line:

   #+begin_quote
   I don't like mode-line, it's too high, affect me to read the code. With Emacs, we only need to focus on very little information, such as time, current mode, git branch. Excessive information can seriously interfere with our attention.
   #+end_quote

   Because of that, I decided to tray the more minimalistic 'awesome-tray'.

   #+begin_src emacs-lisp :tangle yes
   (use-package awesome-tray
     :straight (:type git :host github :repo "manateelazycat/awesome-tray")
     :after (doom-themes)
     :init
     (setq awesome-tray-active-modules '("location" "evil" "buffer-name" "git" "mode-name"))
     (setq awesome-tray-mode-line-inactive-color (doom-lighten (doom-color 'bg) 0.2))
     (setq awesome-tray-mode-line-active-color (doom-lighten (doom-color 'bg) 0.5))
     :config
     (awesome-tray-mode 1))
   #+end_src

* Other

** Copy environment variables

   Let's copy locale variables and the exec path.

   #+begin_src emacs-lisp :tangle yes
   (use-package exec-path-from-shell :straight t
     :config
     (setq exec-path-from-shell-check-startup-files nil)
     (exec-path-from-shell-initialize)
     (exec-path-from-shell-copy-envs '("LANG" "LC_ALL")))
   #+end_src

** Dired

   Lest add more switches to dired, and also remove the bindings that clash with my own/evil's

   #+begin_src emacs-lisp :tangle yes
   (use-package dired
     :after (evil evil-collection)
     :bind (:map dired-mode-map
                 ("<SPC>" . nil))
     :config
     (setq dired-listing-switches "-alh")
     :hook (evil-collection-setup . (lambda (&rest args) (evil-define-key 'normal 'dired-mode-map "<SPC>" nil))))
   #+end_src

** GPG

   In Ubuntu we need to copy ~SSH_AUTH_SOCK~ variable for some reason, so let's use ~exec-path-from-shell~

   #+begin_src emacs-lisp :tangle yes
   (use-package exec-path-from-shell :straight t
     :config
     (exec-path-from-shell-copy-env "SSH_AUTH_SOCK"))
   #+end_src

** Presentation mode

When I'm pairing remotely I need to set the font face bigger, so let's add a keybind for that.

#+begin_src emacs-lisp :tangle yes
(define-minor-mode my/presentation-toggle-mode
  "Controls a toggle for 'presentation' mode.")


(defvar my/presentation-on? nil)

(defun my/presentation-toggle () (interactive)
       (if my/presentation-on?
           (progn (set-face-attribute 'default nil :height 100)
       (setq my/presentation-on? nil))
         (set-face-attribute 'default nil :height 200)
       (setq my/presentation-on? t)))
#+end_src
